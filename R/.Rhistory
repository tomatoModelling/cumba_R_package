initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
View(data)
library(MASS)
library(ggplot2)
# Sample data (replace with actual data)
precipitation <- c(120, 95, 105, 85, 110, 120, 130, 140, 115, 90, 80, 100)
evapotranspiration <- c(100, 105, 110, 95, 100, 105, 110, 120, 115, 100, 90, 95)
# Calculate Climatic Water Balance
calculate_water_balance <- function(precipitation, evapotranspiration) {
return(precipitation - evapotranspiration)
}
climatic_water_balance <- calculate_water_balance(precipitation, evapotranspiration)
# Define the log-logistic probability density function (PDF)
loglogistic_pdf <- function(x, location, scale) {
return((1 / scale) * (x / location)^(scale - 1) / (1 + (x / location)^scale)^2)
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
library(MASS)
library(ggplot2)
# Sample data (replace with actual data)
precipitation <- c(0, 95, 105, 85, 110, 120, 130, 140, 115, 90, 80, 100)
evapotranspiration <- c(100, 105, 110, 95, 100, 105, 110, 120, 115, 100, 90, 95)
# Calculate Climatic Water Balance
calculate_water_balance <- function(precipitation, evapotranspiration) {
return(precipitation - evapotranspiration)
}
climatic_water_balance <- calculate_water_balance(precipitation, evapotranspiration)
# Define the log-logistic probability density function (PDF)
loglogistic_pdf <- function(x, location, scale) {
return((1 / scale) * (x / location)^(scale - 1) / (1 + (x / location)^scale)^2)
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
library(ggplot2)
# Sample data (replace with actual data)
precipitation <- c(1000, 95, 105, 85, 110, 120, 130, 140, 115, 90, 80, 100)
evapotranspiration <- c(100, 105, 110, 95, 100, 105, 110, 120, 115, 100, 90, 95)
# Calculate Climatic Water Balance
calculate_water_balance <- function(precipitation, evapotranspiration) {
return(precipitation - evapotranspiration)
}
climatic_water_balance <- calculate_water_balance(precipitation, evapotranspiration)
# Define the log-logistic probability density function (PDF)
loglogistic_pdf <- function(x, location, scale) {
return((1 / scale) * (x / location)^(scale - 1) / (1 + (x / location)^scale)^2)
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
library(ggplot2)
# Sample data (replace with actual data)
precipitation <- c(0, 95, 105, 85, 110, 120, 130, 140, 115, 90, 80, 100)
evapotranspiration <- c(100, 105, 110, 95, 100, 105, 110, 120, 115, 100, 90, 95)
# Calculate Climatic Water Balance
calculate_water_balance <- function(precipitation, evapotranspiration) {
return(precipitation - evapotranspiration)
}
climatic_water_balance <- calculate_water_balance(precipitation, evapotranspiration)
# Define the log-logistic probability density function (PDF)
loglogistic_pdf <- function(x, location, scale) {
return((1 / scale) * (x / location)^(scale - 1) / (1 + (x / location)^scale)^2)
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
library(ggplot2)
# Sample data (replace with actual data)
precipitation <- c(1000, 1000, 105, 85, 110, 120, 130, 140, 115, 90, 80, 100)
evapotranspiration <- c(100, 105, 110, 95, 100, 105, 110, 120, 115, 100, 90, 95)
# Calculate Climatic Water Balance
calculate_water_balance <- function(precipitation, evapotranspiration) {
return(precipitation - evapotranspiration)
}
climatic_water_balance <- calculate_water_balance(precipitation, evapotranspiration)
# Define the log-logistic probability density function (PDF)
loglogistic_pdf <- function(x, location, scale) {
return((1 / scale) * (x / location)^(scale - 1) / (1 + (x / location)^scale)^2)
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
library(ggplot2)
# Sample data (replace with actual data)
precipitation <- c(1000, 1000, 105, 85, 110, 120, 130, 140, 115, 90, 80, 100)
evapotranspiration <- c(120, 105, 110, 95, 100, 105, 110, 120, 115, 100, 90, 95)
# Calculate Climatic Water Balance
calculate_water_balance <- function(precipitation, evapotranspiration) {
return(precipitation - evapotranspiration)
}
climatic_water_balance <- calculate_water_balance(precipitation, evapotranspiration)
# Define the log-logistic probability density function (PDF)
loglogistic_pdf <- function(x, location, scale) {
return((1 / scale) * (x / location)^(scale - 1) / (1 + (x / location)^scale)^2)
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
library(ggplot2)
# Sample data (replace with actual data)
precipitation <- c(1000, 1000, 105, 2, 110, 120, 130, 140, 115, 90, 80, 100)
evapotranspiration <- c(120, 105, 110, 95, 100, 105, 110, 120, 115, 100, 90, 95)
# Calculate Climatic Water Balance
calculate_water_balance <- function(precipitation, evapotranspiration) {
return(precipitation - evapotranspiration)
}
climatic_water_balance <- calculate_water_balance(precipitation, evapotranspiration)
# Define the log-logistic probability density function (PDF)
loglogistic_pdf <- function(x, location, scale) {
return((1 / scale) * (x / location)^(scale - 1) / (1 + (x / location)^scale)^2)
}
# Define the log-likelihood function for log-logistic distribution
loglikelihood <- function(params, data) {
location <- params[1]
scale <- params[2]
n <- length(data)
loglik <- sum(dlogis(data, location = location, scale = scale, log = TRUE))
return(-loglik)  # Return negative log-likelihood for minimization
}
# Fit the log-logistic distribution using MLE
fit_log_logistic <- function(data) {
initial_params <- c(mean(data), sd(data))  # Initial guess for location and scale
fit <- optim(par = initial_params, fn = loglikelihood, data = data, method = "L-BFGS-B", lower = c(0.1, 0.1))
return(list(location = fit$par[1], scale = fit$par[2]))
}
fit_params <- fit_log_logistic(climatic_water_balance)
# Define the log-logistic CDF
loglogistic_cdf <- function(x, location, scale) {
return(1 / (1 + (location / x)^scale))
}
# Compute SPEI
compute_spei <- function(data, fit_params) {
cdf_values <- loglogistic_cdf(data, fit_params$location, fit_params$scale)
spei_values <- qnorm(cdf_values)
return(spei_values)
}
spei_values <- compute_spei(climatic_water_balance, fit_params)
# Create a Data Frame for Visualization
data <- data.frame(
Date = seq.Date(from = as.Date("2023-01-01"), by = "month", length.out = length(spei_values)),
SPEI = spei_values
)
# Plot the SPEI Results
ggplot(data, aes(x = Date, y = SPEI)) +
geom_line() +
labs(title = "SPEI Time Series", x = "Date", y = "SPEI") +
theme_minimal()
waterContentFruit<-function(cycleLength, FloweringLag, gddAfterFlowering, slope, asymptote)
{
floweringStart <- cycleLength * FloweringLag
floweringDuration <- cycleLength - floweringStart
waterContentFruit <- asymptote / (1+exp(slope*(gddAfterFlowering - floweringDuration/2)))
return(waterContentFruit)
}
cycleLength*FloweringLag
cycleLength = 1500
FloweringLag = 0.4
cycleLength*FloweringLag
gddAfterFlowering = seq(0, 900, 10)
gddAfterFlowering
waterContent <- waterContentFruit(cycleLength,FloweringLag,gddAfterFlowering, 0.2,100)
waterContent
df<-as.data.frame(waterContent)
df$gddAfterFlowering = gddAfterFlowering
ggplot(df) + geom_point(aes(x=gddAfterFlowering,y=waterContent))
library(tidyverse)
ggplot(df) + geom_point(aes(x=gddAfterFlowering,y=waterContent))
waterContent <- waterContentFruit(cycleLength,FloweringLag,gddAfterFlowering, 0.02,100)
df<-as.data.frame(waterContent)
df$gddAfterFlowering = gddAfterFlowering
library(tidyverse)
ggplot(df) + geom_point(aes(x=gddAfterFlowering,y=waterContent))
waterContentFruit<-function(cycleLength, FloweringLag,
gddAfterFlowering, slope, waterContentMin,waterContentMax)
{
floweringStart <- cycleLength * FloweringLag
floweringDuration <- cycleLength - floweringStart
waterContentFruit <- 100 / (1+exp(slope*(gddAfterFlowering - floweringDuration/2)))
waterContentDay<-waterContentMin + waterContentFruit/100 * (waterContentMax-waterContentMin)
return(waterContentDay)
}
cycleLength = 1500
FloweringLag = 0.4
cycleLength*FloweringLag
gddAfterFlowering = seq(0, 900, 10)
waterContent <- waterContentFruit(cycleLength,FloweringLag,gddAfterFlowering, 0.02,5,20)
df<-as.data.frame(waterContent)
df$gddAfterFlowering = gddAfterFlowering
library(tidyverse)
ggplot(df) + geom_point(aes(x=gddAfterFlowering,y=waterContentDay))
waterContentDay <- waterContentFruit(cycleLength,FloweringLag,gddAfterFlowering, 0.02,5,20)
df<-as.data.frame(waterContent)
df$gddAfterFlowering = gddAfterFlowering
library(tidyverse)
ggplot(df) + geom_point(aes(x=gddAfterFlowering,y=waterContentDay))
waterContentFruit<-function(cycleLength, FloweringLag,
gddAfterFlowering, slope, waterContentMin,waterContentMax)
{
floweringStart <- cycleLength * FloweringLag
floweringDuration <- cycleLength - floweringStart
waterContentFruit <- 100 / (1+exp(slope*(gddAfterFlowering - floweringDuration/2)))
waterContentDay<-waterContentMin + waterContentFruit/100 * (waterContentMax-waterContentMin)
return(waterContentDay)
}
cycleLength = 1500
FloweringLag = 0.4
cycleLength*FloweringLag
gddAfterFlowering = seq(0, 900, 10)
waterContentDay <- waterContentFruit(cycleLength,FloweringLag,gddAfterFlowering, 0.02,90,98)
df<-as.data.frame(waterContent)
df$gddAfterFlowering = gddAfterFlowering
library(tidyverse)
ggplot(df) + geom_point(aes(x=gddAfterFlowering,y=waterContentDay))
waterContentFruit<-function(cycleLength, FloweringLag,
gddAfterFlowering, slope, waterContentMin,waterContentMax)
{
floweringStart <- cycleLength * FloweringLag
floweringDuration <- cycleLength - floweringStart
waterContentFruit <- 100 / (1+exp(slope*(gddAfterFlowering - floweringDuration/2)))
waterContentDay<-waterContentMin + waterContentFruit/100 * (waterContentMax-waterContentMin)
return(waterContentDay)
}
cycleLength = 1500
FloweringLag = 0.4
cycleLength*FloweringLag
gddAfterFlowering = seq(0, 900, 10)
waterContentDay <- waterContentFruit(cycleLength,FloweringLag,gddAfterFlowering, 0.02,95,98)
df<-as.data.frame(waterContent)
df$gddAfterFlowering = gddAfterFlowering
library(tidyverse)
ggplot(df) + geom_point(aes(x=gddAfterFlowering,y=waterContentDay))
waterStress = seq(0,45,0.5)
plot(waterStress)
df$waterContentRate <- df$waterContent-lag(df$waterContent)
geom_point(aes(y=waterContentRate)
)
ggplot(df,aes(x=gddAfterFlowering)) +
geom_point(aes(y=waterContentDay))+
geom_point(aes(y=waterContentRate))
ggplot(df,aes(x=gddAfterFlowering)) +
geom_point(aes(y=waterContentDay))+
geom_point(aes(y=waterContentRate*100))
ggplot(df,aes(x=gddAfterFlowering)) +
geom_point(aes(y=waterContentDay))+
geom_point(aes(y=100-waterContentRate*100))
ggplot(df,aes(x=gddAfterFlowering)) +
geom_point(aes(y=waterContentDay))+
geom_point(aes(y=100-waterContentRate*10))
ggplot(df,aes(x=gddAfterFlowering)) +
geom_point(aes(y=waterContentDay))+
geom_point(aes(y=95-waterContentRate*10),col='red')
ggplot(df,aes(x=gddAfterFlowering)) +
geom_point(aes(y=waterContentDay))+
geom_point(aes(y=95-waterContentRate*5),col='red')
install.packages("devtools")
install.packages("roxygen2")
#set this directory as the working directory
setwd('C:\\Users\\simoneugomaria.brega\\Documents\\gitProjects\\cumba_R_package\\R')
library(devtools)
load_all("."); # Working directory should be in the package SCC_R_package
warnings()
rootDepth(0.4, 0.1)
s<-rootDepth(0.4, 0.1)
s
